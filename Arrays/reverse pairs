#include<bits/stdc++.h>
using namespace std;

// reverse pairs is modification of merge sort algo 
// where for i < j need to count the number of elements 2*arr[j] < arr[i]


class Solution{
private:
public:
    void merge(vector<int> &arr,int low,int mid,int high)
    {
        vector<int> k;
        int left=low,right=mid+1;
        while(left<=mid and right<=high)
        {
            if(arr[left]<=arr[right])
            {
                k.push_back(arr[left++]);
            }
            else
            {
                k.push_back(arr[right++]);
            }
        }
        while(left<=mid)
        {
            k.push_back(arr[left++]);
        }
        while(right<=high)
        {
            k.push_back(arr[right++]);
        }
        for(int i=low;i<=high;i++)
        {
            arr[i]=k[i-low];
        }
    }
    int count(vector<int> &arr,int low,int mid,int high)
    {
        int ans=0,right=mid+1;
        for(int i=low;i<=mid;i++)
        {
            while(right<=high and arr[i]>2*arr[right])
            {
                right++;
            }
            ans+=(right-(mid+1));
        }
        return ans;
    }
    int mergeSort(vector<int> &arr,int low,int high)
    {
        int ans=0;
        if(low<high)
        {
            int mid=low+(high-low)/2;
            ans+=mergeSort(arr,low,mid);
            ans+=mergeSort(arr,mid+1,high);
            ans+=count(arr,low,mid,high);
            merge(arr,low,mid,high);
        }
        return ans;
    }
    int reversePairs(vector<int> &arr)
    {
        int low=0,high=arr.size()-1;
        return mergeSort(arr,low,high);
    }
};
int main()
{
    vector<int> arr = {4, 1, 2, 3, 1};
    for(auto it:arr)
    {
        cout<<it<<" ";
    }
    cout<<endl;
    Solution solution;
    auto res=solution.reversePairs(arr);
    cout<<"number of reverse pairs is/are : "<<res<<endl;
}


